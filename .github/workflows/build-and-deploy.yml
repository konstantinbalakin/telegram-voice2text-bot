name: Build and Deploy

on:
  push:
    branches: [main]

jobs:
  test-migrations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install --with dev --extras "faster-whisper"

      - name: Test migrations on fresh database
        env:
          TELEGRAM_BOT_TOKEN: test_token_for_migration_testing
        run: |
          # Create test database directory
          mkdir -p data
          export DATABASE_URL="sqlite+aiosqlite:///./data/test_fresh.db"

          # Apply all migrations from scratch
          poetry run alembic upgrade head

          # Verify we're at HEAD
          CURRENT=$(poetry run alembic current)
          echo "Current revision: $CURRENT"

          # Check that migration succeeded
          if [ -f "data/test_fresh.db" ]; then
            echo "‚úÖ Fresh database migration successful"
          else
            echo "‚ùå Fresh database migration failed"
            exit 1
          fi

      - name: Test upgrade/downgrade cycle
        env:
          TELEGRAM_BOT_TOKEN: test_token_for_migration_testing
        run: |
          # Create another test database
          export DATABASE_URL="sqlite+aiosqlite:///./data/test_cycle.db"

          # Apply all migrations
          poetry run alembic upgrade head
          HEAD_REV=$(poetry run alembic current | awk '{print $1}')
          echo "HEAD revision: $HEAD_REV"

          # Downgrade one step
          poetry run alembic downgrade -1
          PREV_REV=$(poetry run alembic current | awk '{print $1}')
          echo "After downgrade: $PREV_REV"

          # Upgrade back to head
          poetry run alembic upgrade head
          FINAL_REV=$(poetry run alembic current | awk '{print $1}')
          echo "After upgrade: $FINAL_REV"

          # Verify we're back at HEAD
          if [ "$FINAL_REV" = "$HEAD_REV" ]; then
            echo "‚úÖ Upgrade/downgrade cycle successful"
          else
            echo "‚ùå Upgrade/downgrade cycle failed"
            exit 1
          fi

      - name: Test application startup after migration
        run: |
          # Use fresh database
          export DATABASE_URL="sqlite+aiosqlite:///./data/test_fresh.db"
          export TELEGRAM_BOT_TOKEN="test:token"

          # Try to import main module (this will init db)
          poetry run python -c "
          import asyncio
          from src.storage.database import get_engine
          from sqlalchemy import text

          async def test_connection():
              engine = get_engine()
              async with engine.connect() as conn:
                  result = await conn.execute(text('SELECT 1'))
                  assert result.fetchone()[0] == 1
              await engine.dispose()
              print('‚úÖ Database connection successful')

          asyncio.run(test_connection())
          "

  build:
    needs: test-migrations
    runs-on: ubuntu-latest
    environment: production
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changed-files

      - name: Check changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files_ignore: |
            memory-bank/**
            *.md
            docs/**
            .claude/**
            CLAUDE.md

      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Poetry Export Plugin
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          poetry self add poetry-plugin-export

      - name: Export requirements.txt
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          poetry export --without dev -f requirements.txt -o requirements.txt --extras "faster-whisper"

      - name: Set up Docker Buildx
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:latest
            ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  migrate:
    needs: build
    if: needs.build.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Run database migrations on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e  # Exit on error

            echo "üîÑ Starting database migration process..."

            # Navigate to project directory
            cd /opt/telegram-voice2text-bot || exit 1

            # Pull latest code (for migration files)
            git pull origin main

            # Check current migration status
            echo "üìä Current database revision:"
            CURRENT_REV=$(docker run --rm \
              -v $(pwd)/data:/app/data \
              -v $(pwd)/alembic:/app/alembic \
              -v $(pwd)/alembic.ini:/app/alembic.ini \
              -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
              -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
              ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
              alembic current 2>&1 || true)

            echo "$CURRENT_REV"

            # Check if database exists but has no alembic version
            if [ -f "data/bot.db" ] && echo "$CURRENT_REV" | grep -q "Can't locate revision"; then
              echo "‚ö†Ô∏è  Existing database detected without migration history"
              echo "üîñ Stamping database to initial revision 7751fc657749..."

              docker run --rm \
                -v $(pwd)/data:/app/data \
                -v $(pwd)/alembic:/app/alembic \
                -v $(pwd)/alembic.ini:/app/alembic.ini \
                -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
                -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
                ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
                alembic stamp 7751fc657749

              echo "‚úÖ Database stamped to initial revision"
              echo "‚¨ÜÔ∏è  Now applying new migrations..."
            fi

            # Run migrations
            echo "‚¨ÜÔ∏è  Applying migrations..."
            MIGRATION_OUTPUT=$(docker run --rm \
              -v $(pwd)/data:/app/data \
              -v $(pwd)/alembic:/app/alembic \
              -v $(pwd)/alembic.ini:/app/alembic.ini \
              -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
              -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
              ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
              alembic upgrade head 2>&1) || MIGRATION_FAILED=1

            echo "$MIGRATION_OUTPUT"

            if [ -z "$MIGRATION_FAILED" ]; then
              # Success - show new revision
              echo "‚úÖ Migration successful!"
              echo "üìä New database revision:"
              docker run --rm \
                -v $(pwd)/data:/app/data \
                -v $(pwd)/alembic:/app/alembic \
                -v $(pwd)/alembic.ini:/app/alembic.ini \
                -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
                -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
                ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
                alembic current

            elif echo "$MIGRATION_OUTPUT" | grep -q "table .* already exists"; then
              # Database has tables but no alembic version - stamp to initial revision
              echo "‚ö†Ô∏è  Tables already exist - stamping database to initial revision 7751fc657749..."

              docker run --rm \
                -v $(pwd)/data:/app/data \
                -v $(pwd)/alembic:/app/alembic \
                -v $(pwd)/alembic.ini:/app/alembic.ini \
                -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
                -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
                ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
                alembic stamp 7751fc657749

              echo "‚úÖ Database stamped to initial revision"
              echo "‚¨ÜÔ∏è  Now applying new migrations..."

              # Try upgrade again
              docker run --rm \
                -v $(pwd)/data:/app/data \
                -v $(pwd)/alembic:/app/alembic \
                -v $(pwd)/alembic.ini:/app/alembic.ini \
                -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
                -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
                ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
                alembic upgrade head

              echo "‚úÖ Migration successful!"
              echo "üìä New database revision:"
              docker run --rm \
                -v $(pwd)/data:/app/data \
                -v $(pwd)/alembic:/app/alembic \
                -v $(pwd)/alembic.ini:/app/alembic.ini \
                -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
                -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
                ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
                alembic current

            else
              # Real migration failure - attempt rollback
              echo "‚ùå Migration failed with unexpected error!"

              # Try to rollback
              echo "üîÑ Attempting rollback..."
              docker run --rm \
                -v $(pwd)/data:/app/data \
                -v $(pwd)/alembic:/app/alembic \
                -v $(pwd)/alembic.ini:/app/alembic.ini \
                -e DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db \
                -e TELEGRAM_BOT_TOKEN=test_token_for_migrations \
                ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
                alembic downgrade -1 2>&1 || echo "Rollback failed (may not be at any revision)"

              echo "‚ùå Deployment aborted due to migration failure"
              exit 1
            fi

  deploy:
    needs: [build, migrate]
    if: needs.build.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /opt/telegram-voice2text-bot || exit 1

            # Pull latest code (for docker-compose.yml updates)
            git pull origin main

            # Create .env file with secrets
            cat > .env <<EOF
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            BOT_MODE=polling

            # Transcription Provider Configuration
            WHISPER_PROVIDERS=["faster-whisper"]
            WHISPER_ROUTING_STRATEGY=single
            PRIMARY_PROVIDER=faster-whisper

            # FasterWhisper Production Configuration (medium/int8/beam1)
            FASTER_WHISPER_MODEL_SIZE=medium
            FASTER_WHISPER_DEVICE=cpu
            FASTER_WHISPER_COMPUTE_TYPE=int8
            FASTER_WHISPER_BEAM_SIZE=1
            FASTER_WHISPER_VAD_FILTER=true

            # Database
            DATABASE_URL=sqlite+aiosqlite:////app/data/bot.db

            # Processing
            MAX_QUEUE_SIZE=10
            MAX_CONCURRENT_WORKERS=1
            TRANSCRIPTION_TIMEOUT=120
            MAX_VOICE_DURATION_SECONDS=120
            PROGRESS_RTF=0.6

            # Quota
            DEFAULT_DAILY_QUOTA_SECONDS=60

            # Logging
            LOG_LEVEL=INFO

            # Benchmark Mode
            BENCHMARK_MODE=false
            EOF

            # Pull new Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }}

            # Tag as latest
            docker tag ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:${{ github.sha }} \
                       ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:latest

            # Update IMAGE_NAME in .env for docker-compose
            echo "IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot:latest" >> .env

            # Create required directories (if not exist)
            mkdir -p data logs

            # Set permissions for appuser inside container (UID 1000)
            chown -R 1000:1000 data logs

            # Rolling update with zero downtime
            docker compose -f docker-compose.prod.yml up -d --no-deps bot

            # Wait for container to be healthy
            echo "‚è≥ Waiting for health check..."
            sleep 15

            # Check if container is healthy
            CONTAINER_STATUS=$(docker inspect --format='{{.State.Health.Status}}' telegram-voice2text-bot 2>/dev/null || echo "unknown")

            if [ "$CONTAINER_STATUS" != "healthy" ] && [ "$CONTAINER_STATUS" != "unknown" ]; then
              echo "‚ùå Health check failed! Container status: $CONTAINER_STATUS"
              docker compose -f docker-compose.prod.yml logs --tail=50 bot
              exit 1
            fi

            # Show status
            echo "‚úÖ Deployment successful!"
            docker compose -f docker-compose.prod.yml ps

            # Cleanup old images (keep last 3)
            docker images ${{ secrets.DOCKER_USERNAME }}/telegram-voice2text-bot --format "{{.ID}} {{.CreatedAt}}" | \
              tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true
